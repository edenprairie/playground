@page "/form-example"
@attribute [Authorize]
@using System.Text.Json
@using BlazorTutorial.Data
@using BlazorTutorial.Services
@inject IJSRuntime JsRuntime
@inject VisitTrackingService VisitTrackingService
<h1>Forms and Validation</h1>

<EditForm Model="@jobApplication" OnValidSubmit="@SubmitJobApplication">
<DataAnnotationsValidator></DataAnnotationsValidator>
<ValidationSummary></ValidationSummary>
<p>
    <label for="fullName">FullName:</label>
    <InputText id="fullName" @bind-Value="jobApplication.FullName" 
        @oninput="@(EventCallback.Factory.CreateBinder<string>(this, 
            newValue => Task.FromResult(TypeCheck(newValue)), string.Empty))"></InputText>
    <ValidationMessage For="@(() => jobApplication.FullName)"></ValidationMessage>
</p>
<p>
    <label for="description">Description:</label>
    <InputTextArea id="description" @bind-Value="jobApplication.Description"></InputTextArea>
</p>
<p>
    <label for="salary">Salary Expectation:</label>
    <InputNumber id="salary" @bind-Value="jobApplication.SalaryExpectation"></InputNumber>
    <ValidationMessage For="@(() => jobApplication.SalaryExpectation)"></ValidationMessage>
</p>
<p>
    <label for="opensource">Are you doing Open Source?</label>
    <InputCheckbox id="opensource" @bind-Value="jobApplication.DoesOpenSource"></InputCheckbox>
</p>
<p>
    <label for="availability">Interview Availability</label>
    <InputDate id="availability" @bind-Value="jobApplication.Availability"></InputDate>
</p>


<button type="submit">Submit</button>
</EditForm>

<div>
    <span id="resultJson"></span>
</div>
@code 
{
    private JobApplication jobApplication = new JobApplication();

    private async Task SubmitJobApplication() 
    {
        await JsRuntime.InvokeVoidAsync("setElementTextById", "resultJson", JsonSerializer.Serialize(jobApplication));
    }

    private async Task TypeCheck(string currentValue)
    {
        await JsRuntime.InvokeVoidAsync("setElementTextById", "resultJson", $"Current value is {currentValue}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) 
        {
            await VisitTrackingService.TrackingVisitInLocal();
            await VisitTrackingService.TrackingVisitInSession();
            StateHasChanged();
        }
    }
}