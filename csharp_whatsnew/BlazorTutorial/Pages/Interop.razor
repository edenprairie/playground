@page "/interop"
@inject IJSRuntime JsRuntime;
<h1>JS Interop</h1>

<h3>Create Alert</h3>
<button class="btn btn-success" @onclick="ShowAlert">Show Alert</button>

<br />
<br />
<hr />
<h3>Focus</h3>
<h3>Ask Question</h3>
<input @bind="questionText" />
<button class="btn btn-warning" @onclick="AskQuestion">Ask Question</button>
<div>
    The random number is <span id="randomNumberSpan"></span>
</div>

<br />
<br />
<hr />
<h3>Focus</h3>
<input @ref="InputToFocus"/>
<button class="btn btn-danger" @onclick="Focus">Focus!</button>

<br />
<br />
<hr />
<h3>Give me random int</h3>
<div>
    The answer was <span id="answerSpan"></span>
</div>
<button class="btn btn-info" onclick="givenMeRandomInt()" >Randomize!</button>

@code {

    string questionText = string.Empty;
    ElementReference InputToFocus;

    protected override void OnAfterRender(bool firstRender) 
    {
        //good for use JsRuntime. OnInitialized does not have javascript ready yet.
    }

    async Task Focus() 
    {
        await JsRuntime.InvokeVoidAsync("focusElement", InputToFocus);
    }

    async Task ShowAlert()
    {
        await JsRuntime.InvokeVoidAsync("createAlert");
    }

    async Task AskQuestion() {
        var response = await JsRuntime.InvokeAsync<string>("askQuestion", questionText);

        await JsRuntime.InvokeVoidAsync("setElementTextById", "answerSpan", response);
    }

    [JSInvokable]
    public static Task<int> GenerateRandomInt() 
    {
        return Task.FromResult(new Random().Next());
    }
}
